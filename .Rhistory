install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
install.packages("roxygen2")
1+1
example <- matrix(c(1,2,3,4,5,6,7,8), nrow = 4, ncol = 2)
example
View(example)
library(ggplot2)
library(knitr)
library(mapr)
iris
view(iris)
iris_dataset <- matrix(c(iris), nrow = 150, ncol = 5)
iris_dataset
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library()
library(ggplot2)
library(KernSmooth)
library(KernSmooth)
library(KernSmooth)
install.packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
getwd()
setwd("~/GitHub/ProgrammingAssignment2")
getwd()
ls()
rm(list = ls())
ls()
source("makeCacheMatrix.R")
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() {x}
setInverse <- function(inverse) { inv <<- inverse}
getInverse <- function() {inv}
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)){
message("Getting Cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() {x}
setInverse <- function(inverse) { inv <<- inverse}
getInverse <- function() {inv}
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)){
message("Getting Cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
mat <- makeCacheMatrix(matrix(1:25, nrow = 5, ncol = 5))
mat$get()
mat$getInverse()
cacheSolve(mat)
mat <- makeCacheMatrix(matrix(1:9, nrow = 3, ncol = 3))
mat
mat <- makeCacheMatrix(matrix(1:9, nrow = 3, ncol = 3))
mat$get()
mat$getInverse()
cacheSolve(mat)
mat$get()
mat$setInverse()
mat$setInverse(mat)
mat$getInverse()
mat$get()
getwd()
ls()
mat <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
mat
mat$get()
cacheSolve(mat)
mat <- makeCacheMatrix()
mat$set(matrix(data = (1:10), nrow = 5, ncol = 2))
mat$get()
mat$getInverse()
cacheSolve(mat)
mat$set(matrix(data = (1:25), nrow = 5, ncol = 5))
mat$get()
mat$getInverse()
cacheSolve(mat)
mat$set(matrix(data = (1:29), nrow = 3, ncol = 3))
mat <- makeCacheMatrix()
mat$set(matrix(data = (1:29), nrow = 3, ncol = 3))
mat$set(matrix(data = (1:9), nrow = 3, ncol = 3))
mat$get()
mat$getInverse()
cacheSolve(mat)
mat$set(matrix(data = (1:4), nrow = 2, ncol = 2))
mat$get()
mat$getInverse()
cacheSolve(mat)
mat$getInverse()
cacheSolve(mat)
mat$set(matrix(data = (1:9), nrow = 3, ncol = 3))
mat$get()
mat$getInverse()
cacheSolve(mat)
mat$set(matrix(data = (1:4), nrow = 2, ncol = 2))
mat$get()
mat$getInverse()
cacheSolve(mat)
mat$getInverse()
cacheSolve(mat)
m <- matrix(rnorm(100), 10, 10)
m
str(m)
m[, 1]
set.seed(25)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 +2*x + e
summary(y)
plot(x,y)
set.seed(100)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 +2*x + e
summary(y)
plot(x,y)
set.seed(100)
x <- rbinom(100)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 +2*x + e
summary(y)
plot(x,y)
set.seed(100)
x <- rnorm(100)
log.mu <- 0.5 +0.3*x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x,y)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(swirl)
swirl()
?sample()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips<-sample(c(o,1), 100, replace = TRUE)
flips<-sample(c(0,1), 100, replace = TRUE)
flips<-sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
?sample
sample(1:6 , 4, replace = TRUE)
sample(1:6 , 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(1, 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(1, 100, replace = TRUE, prob = c(0.3, 0.7))
flips<-sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm<- colMeans(my_pois)
hist(cm)
swirl()
